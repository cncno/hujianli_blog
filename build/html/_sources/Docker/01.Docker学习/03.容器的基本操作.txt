# 容器的基本操作

### 创建容器

        创建容器有两个命令，一个是 docker create ，另一个是 docker run

        前者创建的容器处于停止状态，而后者不仅创建了容器，而且启动了容器

        docker create ubuntu:14.04
        docker ps 命令用于查看正在运行的容器，我们没有看到任何运行的容器
        docker ps -a 查看所有容器，包含未启动的容器
*  交互型容器：运行在前台，通常会指定有交互的控制台，可以给容器输入，也可以得到


        容器的输出。创建该容器的终端被关闭，在容器内部使用 exit 命令或者调用了 docker stop 、

        docker kill 命令后，容器会变成停止状态。

        后台型容器：运行在后台，创建启动之后就与终端无关。即便终端关闭了，该后台容器

        也依然存在，只有调用 docker stop 或 docker kill 命令时才能够使容器变成停止状态。

### 创建一个交互式的容器
    docker run -i -t --name=inspect_shell ubuntu /bin/bash
	创建一个后台进行的容器

	docker run --name daemon_while -d ubuntu /bin/sh -c "while true;do echo hello world;sleep 1; done"
	使用 -l 选项，该选项告诉Docker只列出最后创建的容器

	docker ps -l
	可以使用 -n=x 选项，此时会列出最后创建的x个容器
	docker ps -n=2

### 启动容器
	sudo docker start inspect_shell

	也可以使用该容器的ID来启动：
	sudo docker start 761ef6d4b28f

	可以用下面的命令创建容器
	--restart 标志被设置成 always 。不管容器的返回码是什么，Docker都会尝试
	重启容器。另外，我们也可以将其设置成 on-failure ，这样的话，当容器的返回值是非0时，Docker
	才会重启容器。 on-failure 标志还接受一个可选的重启次数，如下所示：
	--restart=on-failure:5
	表示当收到一个非0的返回码时，最多尝试重启容器5次。

	使用以下命令创建一个以进程方式运行的容器
	runoob@runoob:~$ docker run -d ubuntu:15.10 /bin/sh -c "while true; do echo hello world; sleep 1; done"
	2b1b7a428627c51ab8810d541d759f072b4fc75487eed05812646b8534a2fe63


### 终止容器

    sudo docker stop daemon_while
	我们还可以通过容器ID来停止容器：
	$ sudo docker stop f40f1463221f

	删除容器
	#docker stop 容器名或 docker kill 容器名 命令停止它才能删除
	docker rm daemon_while

	#使用-f强制删除运行中的容器
	docker rm -f inspect_shell

	#一次性删除所有容器
	Docker并没有提供一次性删除所有容器的命令，但是可以用下面的命令来实现这个目的：
	docker rm `docker ps -a -q`

### 容器内信息获取和命令执行
    1.依附容器
	依附操作 attach 通常用在由 docker start 或者 docker restart 启动的交互型容器中。由于
	docker start 启动的交互型容器并没有具体终端可以依附，而容器本身是可以接收用户交互的，
	这时就需要通过 attach 命令来将终端依附到容器上。

	docker run -i -t ubuntu:14.04 /bin/sh
	docker ps
	docker run -it --name ubuntu ubuntu:14.04 /bin/sh
	docker start ubuntu
	docker ps
	docker attach ubuntu #多次敲击回车

### 查看容器日志
    1.创建一个不断输出一些内容的后台型容器:
	#docker logs 命令用于查看容器的日志，它将输出到标准输出的数据作为日志输出到运行 docker logs 命令的终端上。
	sudo docker run -d --name deamon_logs ubuntu /bin/bash -c 'for((i=0;1;i++));do echo $i;sleep 1;done;'
	deamon_logs是一个包含循环输出自然数的应用程序的容器，我们可以使用 logs 来查看其
	输出：
	sudo docker logs -f deamon_logs

	使用 --tail 标志可以精确控制 logs 输出的日志行数。例如，查看最后5行日志：
	$ sudo docker logs -f --tail 5 daemon_logs

	我们还可以通过 -t 标志查看日志产生的时刻，相关代码如下
	sudo docker logs -f --tail 5 -t deamon_logs

### 查看容器进程
    #创建一个后台型容器（交互型容器也行，但是要到其他控制台运行 docker top ）
	运行 docker top 命令，查看容器中的进程
	docker top deamon_logs

### 查看容器信息
    docker start ubuntu
	docker inspect ubuntu

### 查询容器的运行状态
	docker inspect --format='{{ .State.Running }}' ubuntu
	true

### 查询容器的IP地址
    docker inspect --format '{{ .NetworkSettings.IPAddress }}' ubuntu
	172.17.0.2

	同时还可查看多个信息，例如查看容器名和运行状态：
	docker inspect --format '{{.Name}} {{.State.Running}}' ubuntu ubuntu
	/ubuntu true
	/ubuntu true


### 容器中镜像的使用
    我们可以用 docker exec 命令在容器中运行新的任务，
	它可以创建两种任务：后台型任务和交互型任务。后台型任务没有用户交互终端，交互型任务具
	有和用户交互的输入输出终端。

	docker exec -d ubuntu touch /etc/new_config_file
	#运行交互式容器，进入目录查看新的任务
	docker exec -it ubuntu /bin/bash
	cd /etc
	ll new_config_file

	容器的导入和导出
	#首先，创建一个容器：
	docker run -i -t --name=inspect_import ubuntu /bin/bash
	docker export inspect_import  > my_rongqi.tar

	#反过来，我们可以使用 docker import 命令导入一个本地的tar包作为镜像
	cat my_rongqi.tar | sudo docker import - imported:my_rongqi   #docke impor会把打包的容器导入为一个镜像
	sudo docker images #查看导入的容器
	import 表示从标准输入读取容器内容，我们把name.tar的内容传给了标准输入，res和tag分别
	代表生成的镜像和标记。

	#我们还可以使用一个 url 来导入网络上的容器：
	docker import url res:tag
	#接着就可以通过 docker run 命令使用导入的镜像创建我们需要的容器了。