# 装饰器
    装饰器的作用，写一个可以反复使用的函数或者装饰器类，用于装饰其它函数
    比如：账号密码多次需要登录的时候。
          有些警告信息、提示信息多个地方需要显示的。
          实现一个需求，不用到处修改代码，统一入口

### 一个普通的装饰器函数
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
def abc(fun):
    #定义一个装饰器abc
    def warpper(*args,**kwargs):
        #定义包装饰器函数
        print("开始运行....")
        #调用被装饰的函数
        fun(*args,**kwargs)
        print("运行结束!")
    return warpper

@abc
def demo_decoration(x):   #返回包装饰器函数
    a = []
    for i in range(x):
        a.append(i)
    print(a)

@abc
def hello(name):
    print("Hello {}!".format(name))

if __name__ == '__main__':
    demo_decoration(5)
    print()
    hello("hujianli")
```


### 带参数的装饰器 1
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
def pre_str(pre=''):
    def decorator(old_function):
        def new_function(a, b):
            print("*"*30)
            print(pre + ' input',"用户名:", a)
            print(pre + ' input',"密码:", b)
            print("*"*30)
            return old_function(a, b)
        return new_function
    return decorator

#不带参数，默认值参数
@pre_str()
def sum_str(a,b):
    return a,b

#装饰square_sum()，带参数^_^
@pre_str("^_^")
def square_sum(a, b):
    return a,b

#装饰器square_diff(),带参数T_T
@pre_str("T_T")
def square_diff(a,b):
    return a,b

if __name__ == '__main__':
    print(sum_str("xiaojian722","admin#123"))
    print(square_sum("hujianli", "123.com"))
    print(square_diff("hujianli","1234.com"))
```

### 带参数的装饰器 2
```
#!/usr/bin/env python
# -*- coding:utf8 -*-
import time


def abc(action):
    def mabc(func):
        def wrapper(*args, **kwargs):
            print("开始运行....", action)
            func(*args, **kwargs)
            print("运行结束！....", action)

        return wrapper
    return mabc


def timer(func):
    def deco(*args, **kwargs):
        start_time = time.time()
        func(*args, **kwargs)
        end_time = time.time()
        print(end_time - start_time)

    return deco


@timer
@abc("print_name")  # 带参数的装饰器
def deam_print_name(name):
    time.sleep(2)
    print("Hello {}!".format(name))


@timer
@abc("list_info")  # 带参数的装饰器
def deam_list_print(x):
    a = []
    time.sleep(2)
    for i in range(x):
        a.append(i)
    print(a)


if __name__ == '__main__':
    deam_list_print(8)
    print(''.center(100, "#"))
    print("".center(100, "#"))
    deam_print_name("hujianli")
```

### 带参数的装饰器 3
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
import time

def timer(parameter):
    def out_wrapper(func):
        def wrapper(*args,**kwargs):
            if parameter == "task1":
                start = time.time()
                func(*args,**kwargs)
                stop = time.time()
                print("the task1 run time is :",stop - start)
            elif parameter == "task2":
                start = time.time()
                func(*args,**kwargs)
                stop = time.time()
                print("the task2 run time is :",stop - start)
        return wrapper
    return out_wrapper


@timer("task1")
def task1():
    time.sleep(2)
    print("in the task1")

@timer("task2")
def task2():
    time.sleep(3)
    print("in the task2")

if __name__ == '__main__':
    task1()
    print("我是分割线".center(100, "*"))
    task2()

```


### 定义装饰类的装饰器 1

    采用的方法是：定义内嵌类的函数，返回新类
##### 代码示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
#定义装饰类的装饰器，采用的方法是：定义内嵌类的函数，返回新类

#定义一个类装饰器及其使用的例子
def abc(myclss):
    class InnerClass:
        def __init__(self, z=0):
            self.z = 0
            self.wrapper = myclss()     #实例化被装饰的类

        def position(self):
            self.wrapper.position()
            print('z axis:',self.z)
    return InnerClass                   #返回新定义的类


'''
定义一个能够装饰类的装饰器abc，定义了一个内嵌类InnerClass用于代替被装饰的类，并返回新的内嵌类，实例化普通类
之后，得到的就是被装饰器装饰后的类
'''
@abc
class coordination:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

    def position(self):
        print("x axis:", self.x)
        print("y axis:", self.y)

if __name__ == '__main__':
    coor = coordination()
    coor.position()
```

### 类装饰器 2
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
def decorator_class(SomeClass):
    class NewClass(object):
        def __init__(self,age):
            self.total_display = 0
            self.wrapped = SomeClass(age)

        def display(self):
            self.total_display +=1
            print("*"*20)
            print("total display", self.total_display)
            print("*"*20)
            self.wrapped.display()
    return NewClass

@decorator_class
class Bird:
    def __init__(self,age):
        self.age = age

    def display(self):
        print("My age is ",self.age)


if __name__ == '__main__':
    eagle_lord = Bird(5)
    for i in range(3):
        eagle_lord.display()
```