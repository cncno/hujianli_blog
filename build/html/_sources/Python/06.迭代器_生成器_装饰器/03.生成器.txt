# 生成器
### 快速定义一个生成器
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

a=(i for i in range(5))
print(a)
#生成器用法
print(type(a))
print(list(a))
```

#### 代码示例1
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

def myYield(n):
    '''
    定义一个生成器（03.函数）
    '''
    while n>0:
        print("开始生成......")
        yield n
        print("完成一次......")
        n -= 1
if __name__ == '__main__':
    for i in myYield(4):
        print("遍历得到的值：",i)
    print()

    my_yield = myYield(3)      #生成一个生成对象
    print("已经实例化生成器对象")
    my_yield.__next__()
    print("第二次调用__next__()方法：")
    my_yield.__next__()


```

#### 代码示例2
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

def myYield(n):
    '''
    :return:rcv用来接收调用者传来的值
    '''
    while n >0:
        rcv = yield n       #rcv用来接收调用者传来的值
        n -=1
        if rcv is not None:
            n = rcv

if __name__ == '__main__':
    my_yield = myYield(3)
    print(my_yield.__next__())
    print(my_yield.__next__())
    print("传给生成器一个值，重新初始化生成器")
    print(my_yield.send(10))
    print(my_yield.__next__())

```
#### 代码示例3
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

#通过生成器推导式构建

def generator():
    print(123)
    content = yield 1
    print("===========",content)
    print(456)
    yield 2

g = generator()
ret = g.__next__()
print("*****",ret)

ret = g.send("hello")
print("****",ret)


print()


def func1():
    print(11)
    print(333)
    yield 222
    print(666)
    yield 777

g_obj = func1()
print(g_obj.__next__())
print(g_obj.__next__())
```

### 生成器和协程
#### 示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

#一个简单的生产者与消费者编程模型

def consumer():
    print("等待接收处理任务.......")
    while True:
        data = (yield)
        print("收到任务：", data)

def producer():
    c = consumer()
    c.__next__()
    for i in range(3):
        print("发送一个任务.....", '任务%d' % i)
        c.send("任务%d" % i)

if __name__ == '__main__':
    producer()
```
