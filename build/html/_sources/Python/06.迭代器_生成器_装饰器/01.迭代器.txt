# 迭代器

    使用dir()函数查看属性
    '__getattribute__'或者  '__next__',说明是个可迭代的对象
    __iter__() 方法返回对象本身，是for遇见使用迭代器的要求
    __next__() 方法返回容器中下一个元素或数据，当容器中数据用尽时，引发StopIteration异常


#### 代码示例1
```
class Fibs:
    def __init__(self, n=10):
        self.a = 0
        self.b = 1
        self.n = n      #定义初始化参数n

    def __iter__(self):
        return self

    def __next__(self):
        self.a,self.b = self.b, self.a + self.b     #a=b b=a+b
        if self.a > self.n:         #退出条件
            raise StopIteration
        return self.a,self.b

hu = Fibs(100)
for i in hu:
    print(i)
```
#### 代码示例2
```
#自定义迭代器
class MyIterator:
    def __init__(self,x=2,xmax=100):
        '''
        定义构造方法，初始化属性
        '''
        self.__mul,self.__x = x,x
        self.__xmax = xmax

    def __iter__(self):
        """
        :return:定义迭代器协议方法，返回类本身
        """
        return self

    def __next__(self):
        if self.__x and self.__x != 1:
            self.__mul *= self.__x
            if self.__mul <= self.__xmax:
                return self.__mul
            else:
                raise StopIteration
        else:
            raise StopIteration

if __name__ == '__main__':
    myiter = MyIterator()
    for i in myiter:
        print("迭代器的数据元素为{}".format(i))

```

#### 代码示例3
```
#!/usr/bin/env python
#-*- coding:utf8 -*-】
class Counter:
    '''
    定义用于计数的类
    '''
    def __init__(self,x=0):
        #定义构造函数，初始化实例属性x
        self.x = x

counter = Counter()  #实例化类

def used_iter():
    #修改计数类中实例属性的值
    counter.x +=2
    return counter.x

for i in iter(used_iter,8):         #8为哨兵，迭代到8立刻停止
    print("本次遍历的数值：{}".format(i))
```