# 选择语句

### Python代码执行过程
```
Python代码在执行过程中，遵循下面的基本原则：

普通语句，直接执行；
碰到函数，将函数体载入内存，并不直接执行
碰到类，执行类内部的普通语句，但是类的方法只载入，不执行
碰到if、for等控制语句，按相应控制流程执行
碰到@，break，continue等，按规定语法执行
碰到函数、方法调用等，转而执行函数内部代码，执行完毕继续执行原有顺序代码
```

### 条件判断
#### Python 中的比较操作符见下表。

    相等 ==
    不等于 !=
    小于 <
    不大于 <=
    大于 >
    不小于 >=
    属于 in...


- 什么是真值（ True ）
如果表达式的返回类型不是布尔会发生什么？什么情况下 Python 会认为是 True 和 False ?
一个成假赋值不一定明确表示为 False .

下面的情况也会被认为是 False 。

    布尔 False
    null 类型 None
    整型 0
    浮点型 0.0
    空字符串 ''
    空列表 []
    空元组 ()
    空字典 {}
    空集合 set()



```
简单的if语句
if 表达式：（布尔值）
    语句块


if 表达式:
   语句块1
else:
    语句块2


if 表达式:
    语句块1
elif 表达式:
    语句块2
else:
    语句块3


#推荐写法
if flag:
    pass

if not flag:
    pass


if a == 1:
    pass


########################if 的嵌套方式########################
if 表达式1：
    if 表达式2：
        语句块2
    else:
        语句块3
else:
    语句块1


```

#### 代码示例1
```
#!/use/bin/env python
# _*_ coding:utf-8 _*_
# 只需脚本是让用户输入一个数字，并把值赋值给变量n
n = int(input("Pless Numbers: "))
# 如果n大于10
if n > 10:
    # 输出n > 10
    print("n > 10")
# 如果n等于10
elif n == 10:
    # 输出n == 10
    print("n == 10")
# 否则
else:
    # 输出n < 10
    print("n < 10")
```

### 三元运算符

#### 代码示例2
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
a = 4
b = 5
c = a if a > b else b
print(c)

if a > b:
    print(a)
else:
    print(b)


if a<=b:
    minalue = a
else:
    minalue = b

minalue = a if a<=b else b

```

### 断言 assert
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

'''
# 伪代码
if not condition:
    crash program
'''

#当不知道程序会在哪里出错，与其在运行时崩溃，不如在出现错误条件时就崩溃
x=3
assert x>0, "x is not zero or negative"
assert x%2 == 0, "x is not an even number"

'''
使用assert断言时，要注意以下几点： 
（1）assert断言用来声明某个条件是真的。 
（2）如果你非常确信你使用的列表中至少有一个元素，想要检验这一点，并在它非真时引发一个错误，那么assert语句是应用在这种情形下的理想语句。 
（3）assert语句失败时，会引发一个AssertionError。
'''

```

### pass 占位符
```python
name="xiaoming"
if name == "xiaoming":
    print("{0} hello".format(name))
elif name == "xiaozhang":
    pass
else:
    print("do nothing")
    
```