# switch语句替代方案

#### 代码示例1：
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
from __future__ import division

x =1
y =2

operator = '/'

result = {
    "+": x+y,
    "-": x-y,
    "*": x*y,
    "/": x/y
}

print(result.get(operator, 'wrong value'))


def zero():
    return "zero"

def one():
    return "one"

def switch_case(value):
    switcher = {
        0: zero,
        1: one,
        2: lambda:"tow",
    }

    func = switcher.get(value, lambda :"nothing")
    return func()

print(switch_case(1))
print(switch_case(2))
print(switch_case(3))
```

### 类来实现switch 调度方法
#### 代码例子1:
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
class Switcher(object):
    def numbers_to_methods_to_strings(self, argument):
        """Dispatch method"""
        # prefix the method_name with 'number_' because method names
        # cannot begin with an integer.
        method_name = 'number_' + str(argument)
        # Get the method from 'self'. Default to a lambda.
        method = getattr(self, method_name, lambda: "nothing")
        # Call the method as we return it
        return method()

    def number_0(self):
        return "zero"

    def number_1(self):
        return "one"

    def number_2(self):
        return "two"

hu = Switcher()
for i in range(5):
    print("number_{}:{}".format(i, hu.numbers_to_methods_to_strings(i)))
```
#### 代码例子2
```
#!/usr/bin/env python
#-*- coding:utf8 -*-

class switch(object):
  def __init__(self, value):
    self.value = value
    self.fall = False

  def __iter__(self):
    """Return the match method once, then stop"""
    yield self.match
    raise StopIteration

  def match(self, *args):
    """Indicate whether or not to enter a case suite"""
    if self.fall or not args:
      return True
    elif self.value in args: # changed for v1.5, see below
      self.fall = True
      return True
    else:
      return False


# The following example is pretty much the exact use-case of a dictionary,
# but is included for its simplicity. Note that you can include statements
# in each suite.
v = '+'
x = 10
y = 20
for case in switch(v):
    if case('+'):
        print(x+y)
        break
    if case('-'):
        print(x-y)
        break
    if case('*'):
        print(x*y)
        break
    if case('/'):
        print(x/y)
        break
    if case():      #do nothing
        print()
        break


```