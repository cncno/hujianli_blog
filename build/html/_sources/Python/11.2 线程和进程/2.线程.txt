# 线程
```
Python 的标准库提供了两个模块： _thread 和 threading ， _thread 是低级模块， threading 是高级模
块，对 _thread 进行了封装。绝大多数情况下，我们只需要使用 threading 这个高级模块。
```

```
启动一个线程就是把一个函数传入并创建 Thread 实例，然后调用 start() 开始执行：
```

### Thread类来创建多线程

#### 代码示例1
```python
#!/usr/bin/env python
# -*- coding:utf8 -*-
import threading
import time


# 新线程执行的代码

def loop():
    print("thread {} is running ....".format(threading.current_thread().name))
    n = 0
    while n < 5:
        n = n + 1
        print("thread {} >>> {}".format(threading.current_thread().name, n))
        time.sleep(1)
    print("thread {} ended".format(threading.current_thread().name))


print("thread {} is running ....".format(threading.current_thread().name))
t = threading.Thread(target=loop, name="Loopthread",)
t.start()
t.join()
print('thread %s ended.' % threading.current_thread().name)

```
#### 代码示例2
``` 
import time
from threading import Thread

def countdown(n):
    while n > 0:
        print("T-minus",n)
        n -= 1
        time.sleep(1)





# Create and launch a thread
t = Thread(target=countdown, args=(10,))
t.start()
```


### Thread子类创建多线程
#### 代码示例1
```python
import threading
import time
class MyThreading(threading.Thread):
    def __init__(self, conn):
        super(MyThreading, self).__init__()
        self.conn = conn
    def run(self):
        print('run task', self.conn)
        time.sleep(5)
t1 = MyThreading('t1')
t2 = MyThreading('t2')
t1.start()
t2.start()
```

#### 代码示例2
```python
#!/usr/bin/env python
#-*- coding:utf8 -*-

from threading import Thread
import time

class SubThread(Thread):
    def run(self):
        for i in range(3):
            time.sleep(1)
            msg = '子线程' + self.name + "执行，i=" + str(i)
            print(msg)

if __name__ == '__main__':
    print("主线程开始".center(100, "-"))
    t1 = SubThread()
    t2 = SubThread()
    t1.start()
    t2.start()
    t1.join()
    t2.join()
    print("主进程结束".center(100, '-'))
```
### 什么是互斥锁
```python
#!/usr/bin/env python
# -*- coding:utf8 -*-
# threading.Lock()
# 使用互斥锁可以防止多个线程同时读取内存的某一个区域,互斥锁保证了每个线程同一时间只有一个在使用内存资源

from threading import Thread, Lock
import time

'''
# 互斥锁的使用

#创建锁
mutex = threading.Lock()

#锁定
mutex.acquire([blocking])

#释放锁
mutex.release()

'''
num = 100


def task():
    global num
    mutex.acquire()     #锁定线程，只有1个进程可以抢用
    time.sleep(0.5)
    num -= 1
    print("购买成功，剩余{}张电影票".format(num))
    mutex.release()     #释放，其他线程可以进行操作


if __name__ == '__main__':
    mutex = Lock()      # 创建锁
    t_l = []
    for i in range(10):
        t = Thread(target=task)
        t_l.append(t)
        t.start()

    for t in t_l:
        t.join()

```




### 线程同步
```
使用Thread对象的Lock和RLock可以实现简单的线程同步，
这两个对象都有acquire方法和release方法。
对于每次只允许一个线程操作的数据，可以将操作放到acquire和release方法之间。
多线程的优势在于可以同时运行多个任务，但当线程需要共享数据时，可能存在数据不同步的问题。 
考虑这样一种情况：一个列表里所有元素都是0，线程set从后向前把所有元素改成1，
而线程print负责从前往后读取列表并输出。

```

##### 代码示例
```python
#!/usr/bin/env python
#-*- coding:utf8 -*-
import threading
from time import sleep
from datetime import datetime

date_time_format = '%y-%M-%d %H:%M:%S'

class MyThread(threading.Thread):
    def __init__(self, threadID, name, counter):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
        self.counter = counter

    def run(self):
        print("开启线程：" + self.name)
        #获取锁，用于线程同步
        threadLock.acquire()

        print_time(self.name, self.counter, 3)
        
        #释放锁，开启下一个线程
        threadLock.release()


def date_time_str(date_time):
    return datetime.strftime(date_time, date_time_format)

def print_time(threadName, delay, counter):
    while counter:
        sleep(delay)
        print("{} {}".format(threadName, date_time_str(datetime.now())))
        counter -=1


def main():
    #创建新线程
    thread1 = MyThread(1, "Thread-1", 1)
    thread2 = MyThread(2, "Thread-2", 3)

    #开启新线程
    thread1.start()
    thread2.start()

    # 添加线程到线程列表
    threads.append(thread1)
    threads.append(thread2)

    #等待所有线程完成
    for t in threads:
        t.join()
    print("退出主线程.......")

if __name__ == '__main__':
    threadLock = threading.Lock()
    threads = []
    main()
```

### 使用队列实现线程间通信
```python
#!/usr/bin/env python
#-*- coding:utf8 -*-
'''
通常使用于生产者和消费者模式
'''
#导入队列模块
from queue import Queue
from threading import Thread
import time
import random

class Producer(Thread):
    def __init__(self, name, queue):
        Thread.__init__(self, name=name)
        self.data = queue

    def run(self):
        for i in range(5):
            print("生产者{} 将产品{}加入队列".format(self.getName(), i))
            self.data.put(i)
            time.sleep(random.random())

        print("生产者{}完成！".format(self.getName()))


class Consumer(Thread):
    def __init__(self, name, queue):
        Thread.__init__(self, name=name)
        self.data = queue

    def run(self):
        for i in range(5):
            val = self.data.get()
            print("消费者{} 将产品{}从队列中取出".format(self.getName(), val))
            time.sleep(random.random())

        print("消费者{}完成！".format(self.getName()))

if __name__ == '__main__':
    print("主线程开始".center(50, "-"))
    queue = Queue()
    producer = Producer('Producer', queue)
    consumer = Consumer('Consumer', queue)
    producer.start()
    consumer.start()
    producer.join()
    consumer.join()
    print("主线程结束".center(50, "-"))

```