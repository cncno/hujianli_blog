# 使用with语句读写文件
### with语句介绍
    with语句为上下文管理器，__enter__ 和 __exit__两个方法实现，使用with操作文件
    会自动关闭文件句柄，无需额外进行file.close()

### with 工作原理
    （１）紧跟with后面的语句被求值后，返回对象的“__enter__()”方法被调用，这个方法的返回值将被赋值给as后面的变量；
    （２）当with后面的代码块全部被执行完之后，将调用前面返回对象的“__exit__()”方法。
#### 代码演示
```
class Sample:
    def __enter__(self):
        print("in __enter__")
        return "Foo"
    def __exit__(self, exc_type, exc_val, exc_tb):
        print("in __exit__")
def get_sample():
    return Sample()
with get_sample() as sample:
    print("Sample: ", sample)
```

#### 整个运行过程如下：
- （１）__enter__()方法被执行；
- （２）__enter__()方法返回的值，在这个例子中是”Foo”，赋值给变量sample；
- （３）执行代码块，打印sample变量的值为”Foo”；
- （４）__exit__()方法被调用；



#### 代码示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-、
'''
with expression as target:
    with-boby
'''
with open('message.txt','r',encoding='utf-8') as file:
    print(file.read())

print('\n 即将显示------\n')
print('文件是否关闭了？', file.closed)
```
### 同时打开多个文件
#### 代码示例
```
with open('log1') as obj1, open('log2') as obj2:
	pass

```
### 同时开启2个文件修改后改名
#### 代码示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
import os
src_txt = "a.txt"
dst_txt = "a_bak.txt"
with open(src_txt,"w") as f:
    f.write("花儿呀。\n"
            "花儿呀")

with open(src_txt) as fr,open(dst_txt,"w") as fw:
    for line in fr:
        lines = line.replace("花","flower")
        fw.write(lines)

os.remove(src_txt)
os.rename(dst_txt,src_txt)

```



### 上下文管理器介绍
    任何定义了__enter__()方法和__exit__()方法的对象都可以用于上下文管理器。
#### 代码示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
'''
任何定义了__enter__()方法和__exit__()方法的对象都可以用于上下文管理器。
'''

class Vow(object):
    def __init__(self, text):               #构造函数，text为传入参数
        self.text = text

    def __enter__(self):
        self.text = "I say: " + self.text       #增加前缀,实例化类之后的操作
        return self                             #返回一个对象
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.text = self.text + "!"              #增加后缀，类调用完毕之后的操作
        print(self.text)

with Vow("I'm hujianli") as myVow:
    print(myVow.text)

```


### 定义一个类似open函数的上下文管理器
#### 代码示例
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
import os
import shutil
file_info = "hujianli.py"
write_info='''#!/usr/bin/env python
#-*- coding:utf8 -*-
print("test")
print()
'''

def create_file(file):
    if not os.path.exists(file):
        with open(file,"w") as f:
            f.write(write_info)
    else:
        number = 1
        Flag = True
        while Flag:
            file_info_name = file.split('.')
            file_name = file_info_name[0] + "_bak" + str(number) +"."+file_info_name[1]
            if not os.path.exists(file_name):
                with open(file) as f1,open(file_name,"w") as f2:
                    f2.write(f1.read())
                    Flag = False
            number +=1

class FileMgr:
    '自定义一个打开文件，后自动关闭文件的上下文管理器'
    def __init__(self,filename):
        self.filename = filename
        self.f = None

    def __enter__(self):
        self.f = open(self.filename,encoding='utf-8')
        return self.f

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.f:
            self.f.close()

if __name__ == "__main__":
    create_file(file_info)
    with FileMgr(file_info) as f:
        for line in f.readlines():
            print(line,end='')
```

### 总结
实际上，在with后面的代码块抛出异常时，exit()方法被执行。开发库时，清理资源，关闭文件等操作，都可以放在exit()方法中。
总之，with-as表达式极大的简化了每次写finally的工作，这对代码的优雅性是有极大帮助的。
如果有多项，可以这样写：
```
with open('1.txt') as f1, open('2.txt') as  f2:
    #do something
```
