# time、datetime模块
## time模块
```
常用表示时间方式： 时间戳，格式化的时间字符串，元组（struct_time）
UTC（Coordinated Universal Time，世界协调时）亦即格林威治天文时间，世界标准时间。在中国为UTC+8。DST（Daylight Saving Time）即夏令时。
时间戳（timestamp）的方式：通常来说，时间戳表示的是从1970年1月1日00:00:00开始按秒计算的偏移量。
元组（struct_time）方式：struct_time元组共有9个元素，返回struct_time的函数主要有gmtime()，localtime()，strptime()。
```
### 几种时间形式的转换
![时间转换](../../_static/date_to_format.PNG)
```
#!/usr/bin/env python
#-*- coding:utf8 -*-
import time
#时间戳格式时间
print(time.time())

#UTC时间
print(time.gmtime())

#本地时间
print(time.localtime())

#tm_wday(0-6)  星期1-星期6



#将本地时间转为时间戳
hu=time.localtime()
print(time.mktime(hu))

#struct_time转换成format_time
'''
%a    本地（locale）简化星期名称
%A    本地完整星期名称
%b    本地简化月份名称
%B    本地完整月份名称
%c    本地相应的日期和时间表示
%d    一个月中的第几天（01 - 31）
%H    一天中的第几个小时（24小时制，00 - 23）
%I    第几个小时（12小时制，01 - 12）
%j    一年中的第几天（001 - 366）
%m    月份（01 - 12）
%M    分钟数（00 - 59）
%p    本地am或者pm的相应符    一
%S    秒（01 - 61）    二
%U    一年中的星期数。（00 - 53星期天是一个星期的开始。）第一个星期天之前的所有天数都放在第0周。
%w    一个星期中的第几天（0 - 6，0是星期天）    三
%W    和%U基本相同，不同的是%W以星期一为一个星期的开始。
%x    本地相应日期
%X    本地相应时间
%y    去掉世纪的年份（00 - 99）
%Y    完整的年份
%Z    时区的名字（如果不存在为空字符）
%%    ‘%’字符
'''
import time
print(time.time())
hu = time.localtime()
print(hu)
print(time.strftime("%Y-%m-%d %H:%M:%S",hu))

#语法：
#strftime(format,[tuple])

# format_time转换成struct_time
hu2 = time.strftime("%Y-%m-%d %H:%M:%S",hu)
print(hu)

```
### 结构化时间转为字符串时间
![时间转换](../../_static/date_to_format2.PNG)

```
import time
x = time.localtime()
print(x)
print(time.asctime(x))
```
```
#时间戳转换成字符串
import time
print(time.time())
print(time.ctime())
```

## datetime模块
```
功能	说明
datetime.date.today()	打印输出当前的系统日期
datetime.date.fromtimestamp(time.time())	将时间戳转成日期格式
datetime.datetime.now()	打印当前的系统时间
current_time.replace(2016,5,12)	返回当前时间,但指定的值将被替换
datetime.datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")	将字符串转换成日期格式
```
```
|    功能    | 说明 |
| ---------- | --- |
| datetime.date.today() |  打印输出当前的系统日期 |
| datetime.date.fromtimestamp(time.time())       |  将时间戳转成日期格式 |
| datetime.datetime.now() |  打印当前的系统时间 |
| current_time.replace(2016,5,12)       |  返回当前时间,但指定的值将被替换 |
| datetime.datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M") |  将字符串转换成日期格式 |
```

### 输出当前系统时间
```
>>> print(datetime.date.today())
2016-05-25
```
### 将时间戳格式转换为日期格式
```
>>> time.time()
# 时间戳格式
1464156222.1887317
>>> print(datetime.date.fromtimestamp(time.time()))
# 日期格式
2016-05-25
```

### 将日期格式转换为struct_time格式
```
>>> current_time = datetime.datetime.now()
>>> print(current_time)
2016-05-25 14:05:26.706667

>>> print(current_time.timetuple())
# 返回struct_time格式
time.struct_time(tm_year=2016, tm_mon=5, tm_mday=25, tm_hour=14, tm_min=5, tm_sec=26, tm_wday=2, tm_yday=146, tm_isdst=-1)
```

### 替换当前系统时间
```
>>> print(current_time.replace(2016,5,12))
2016-05-12 14:05:26.706667
将字符串转换成日期格式

>>> str_to_date = datetime.datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
>>> print(str_to_date)
2006-11-21 16:30:00
```


### 时间相加减

比现在加10天
```
>>> new_date = datetime.datetime.now() + datetime.timedelta(days=10)
>>> print(new_date)
2016-06-04 14:10:36.119523
```

比现在减10天
```
>>> new_date = datetime.datetime.now() + datetime.timedelta(days=-10)
>>> print(new_date)
2016-05-15 14:11:06.739814
```

比现在减10小时
```
>>> new_date = datetime.datetime.now() + datetime.timedelta(hours=-10)
>>> print(new_date)
2016-05-25 04:11:44.095624
```

比现在+120s
```
>>> new_date = datetime.datetime.now() + datetime.timedelta(seconds=120)
>>> print(new_date)
2016-05-25 14:14:02.090219
```