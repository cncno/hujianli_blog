# 方法的重写
    子类继承父类之后可修改父类的方法，通过同名的方法，就覆盖了父类的方法
### 用代码来理解

#### 代码示例 1
```python
#!/usr/bin/env python
# -*- coding:utf8 -*-
class fangfa1:
    def __init__(self):
        pass

    def speak(self):
        print("hujianli say .....")


class Fangfa2(fangfa1):
    def __init__(self):
        pass

    def speak(self):
        """
        方法重载，子类和父类有相同的方法时，子类默认会修改掉父类的方法
        :return:
        """
        print("xiaojian  say ......")


if __name__ == '__main__':
    hu = Fangfa2()
    hu.speak()

```

#### 代码示例 2
```python
#!/usr/bin/env python
#-*- coding:utf8 -*-
'''
class ClassName(基类):
    pass
'''

class Fruit:
    color = '绿色'    #类属性

    def harvest(self,color):
        print('水果是: ', color, '的！')
        print('水果已经收获.....')
        print('水果原来是: ', Fruit.color)    #输出类属性

class Apple(Fruit):
    color = '红色'

    def __init__(self):
        print('我是Apple...')

    def harvest(self,color):
        '''
        方法的重写
        :param color:
        :return:
        '''
        print('苹果！')
        print('苹果已经收获.....')
        print('苹果原来是: ', Fruit.color)    #输出类属性

class Orange(Fruit):
    color = '橙色'

    def __init__(self):
        print('我是Orange...')

    def harvest(self,color):
        '''
        方法的重写
        :param color:
        :return:
        '''
        print('橘子！')
        print('橘子已经收获.....')
        print('橘子原来是: ', Fruit.color)    #输出类属性

apple = Apple()
apple.harvest(apple.color)
print()
orange = Orange()
orange.harvest(orange.color)

```

### 使用super()函数进行修改重写父类的方法
#### 代码示例 1
```python
#!/usr/bin/env python
#-*- coding:utf8 -*-
class Bird(object):
    def chirp(self):
        print("make sound")


class Chicken(Bird):
    def chirp(self):
        super(Chicken, self).chirp()
        print("ji")


if __name__ == '__main__':
    print("第一次实例化".center(100, "="))
    bird = Bird()
    bird.chirp()

    print("第二次实例化".center(100, "="))
    summer = Chicken()      #调用被覆盖的方法
    summer.chirp()

```

```python
__metaclass__ = type

class Person:
    def __init__(self):
        self.height = 160

    def about(self,name):
        print("{} is about {}".format(name,self.height))

class Girl(Person):
    def __init__(self):
        self.breast = 90
        # Person.__init__(self)
        super(Girl, self).__init__()   #继承父类的构造方法

    def about(self,name):
        print("{} is a hot girl ,she is about {} height is {}".format(name, self.height, self.breast))
        super(Girl, self).about(name)   #继承父类的方法


if __name__ == '__main__':
    hu = Girl()
    hu.about("wangxiaomei")
```