# 字符串和文本
## 多个界定符来分割字符串
```
In [48]: line = 'asdf fjdk; afed, fjek,asdf, foo'

In [49]: import re
In [53]: re.split(r'[;,\s]\s*', line)
Out[53]: ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']
```

- 捕获分组
```
line = 'asdf fjdk; afed, fjek,asdf, foo'

In [54]: fields = re.split(r'(;|,|\s)\s*', line)

In [55]: fields
Out[55]: ['asdf', ' ', 'fjdk', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']

In [56]: value = fields[::2]

In [57]: value
Out[57]: ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']

In [58]: delimiters = fields[1::2] + ['']

In [59]: delimiters
Out[59]: [' ', ';', ',', ',', ',', '']

In [61]:  ''.join(v+d for v,d in zip(value, delimiters))
Out[61]: 'asdf fjdk;afed,fjek,asdf,foo'
```
- 如果你不想保留分割字符串到结果列表中去，但仍然需要使用到括号来分组正则表达式的话， 确保你的分组是非捕获分组，形如 (?:...)
```
In [62]: re.split(r'(?:,|;|\s)\s*', line)
Out[62]: ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']
```
## 检查字符串开头或结尾
```
>>> filename = 'spam.txt'
>>> filename.endswith('.txt')
True
>>> filename.startswith('file:')
False
>>> url = 'http://www.python.org'
>>> url.startswith('http:')
True
>>>

```
```
>>> import os
>>> filenames = os.listdir('.')
>>> filenames
[ 'Makefile', 'foo.c', 'bar.py', 'spam.c', 'spam.h' ]
>>> [name for name in filenames if name.endswith(('.c', '.h')) ]
['foo.c', 'spam.c', 'spam.h'
>>> any(name.endswith('.py') for name in filenames)
True
```
- 下面这个语句检查某个文件夹中是否存在指定的文件类型：
```
if any(name.endswith(('.c', '.h')) for name in listdir(dirname)):
    pass
```

## 使用shell的通配符来匹配字符串
### 说明
- fnmatch() 函数匹配能力介于简单的字符串方法和强大的正则表达式之间。
- 如果在数据处理操作中只需要简单的通配符就能完成的时候，这通常是一个比较合理的方案。
```
>>> from fnmatch import fnmatch, fnmatchcase
>>> fnmatch('foo.txt', '*.txt')
True
>>> fnmatch('foo.txt', '?oo.txt')
True
>>> fnmatch('Dat45.csv', 'Dat[0-9]*')
True
>>> names = ['Dat1.csv', 'Dat2.csv', 'config.ini', 'foo.py']
>>> [name for name in names if fnmatch(name, 'Dat*.csv')]
['Dat1.csv', 'Dat2.csv']
>>>

```

```
addresses = [
    '5412 N CLARK ST',
    '1060 W ADDISON ST',
    '1039 W GRANVILLE AVE',
    '2122 N CLARK ST',
    '4802 N BROADWAY',
]

>>> from fnmatch import fnmatchcase
>>> [addr for addr in addresses if fnmatchcase(addr, '* ST')]
['5412 N CLARK ST', '1060 W ADDISON ST', '2122 N CLARK ST']
>>> [addr for addr in addresses if fnmatchcase(addr, '54[0-9][0-9] *CLARK*')]
['5412 N CLARK ST']
>>>

```

## 贪婪匹配和非贪婪匹配
```
In [63]: str_pat = re.compile(r'"(.*)"')

In [64]: text1 = 'Computer says "no."'

In [65]: import re


In [66]: str_pat.findall(text1)
Out[66]: ['no.']

In [67]: text2='Computer says "no." Phone says "yes."'

In [68]: str_pat.findall(text2)
Out[68]: ['no." Phone says "yes.']

In [69]: str_pat = re.compile(r'"(.*?)"')   #模式中的*操作符后面加上?修饰符.从而得到最短匹配

In [70]: str_pat.findall(text2)
Out[70]: ['no.', 'yes.']
```

## 字符串对齐
```
In [71]: hu="hello world"

In [72]: hu.ljust(20)
Out[72]: 'hello world         '

In [73]: hu.rjust(20)
Out[73]: '         hello world'

In [74]: hu.center(20)
Out[74]: '    hello world     '


In [75]: hu.center(20,'*')
Out[75]: '****hello world*****'

In [78]: hu.rjust(20,"*")
Out[78]: '*********hello world'
```
### 函数 format() 同样可以用来很容易的对齐字符串
```
In [79]: format(hu,">20")
Out[79]: '         hello world'

In [80]: format(hu,"<20")
Out[80]: 'hello world         '

In [81]: format(hu,"^20")
Out[81]: '    hello world     '


In [82]: format(hu,"*^20")
Out[82]: '****hello world*****'

In [83]: format(hu,"=>20s")
Out[83]: '=========hello world'

In [84]: format(hu,"=<20s")
Out[84]: 'hello world========='


In [85]: '{:>10s}{:>20s}'.format("hello","world")
Out[85]: '     hello               world'


In [86]: x = 1.23456
In [87]: format(x,'>10')
Out[87]: '   1.23456'

In [88]: format(x,'^10.2f')
Out[88]: '   1.23   '

In [89]: format(x,'^10.1f')
Out[89]: '   1.2    '

##老版本的代码
In [90]: "%-20s" %(hu)
Out[90]: 'hello world         '

In [91]: "%20s" %(hu)
Out[91]: '         hello world'
```
__format() 要比 % 操作符的功能更为强大。
并且 format() 也比使用 ljust() , rjust() 或 center() 方法更通用，
因为它可以用来格式化任意对象，而不仅仅是字符串。__

## 拼接字符串的方法

### join() 方法
```
In [92]: parts = ['Is', 'Chicago', 'Not', 'Chicago?']

In [93]: ''.join(parts)
Out[93]: 'IsChicagoNotChicago?'

In [94]: ' '.join(parts)
Out[94]: 'Is Chicago Not Chicago?'

In [95]: ','.join(parts)
Out[95]: 'Is,Chicago,Not,Chicago?'
```
### 加号(+)
```
In [96]: a = "my name is hujianli"

In [97]: a+="+ info test"

In [98]: a
Out[98]: 'my name is hujianli+ info test'


In [99]: b = "add tow info test"

In [102]: a + " " + b
Out[102]: 'my name is hujianli+ info test add tow info test'

In [103]: print('{} {}'.format(a,b))
my name is hujianli+ info test add tow info test

```
### 技巧是利用生成器表达式转换数据为字符串的同时合并字符串
```
In [104]: data = ['hujianli',18,22,11]

In [105]: ",".join(str(i) for i in data)
Out[105]: 'hujianli,18,22,11'

In [106]: "+".join(str(i) for i in data)
Out[106]: 'hujianli+18+22+11'
```
### 字符串拼接的三种方式比较
```
In [113]: a + '+' + b + '+' + c
Out[113]: 'hu+jian+li'

In [116]: "+".join([a,b,c])
Out[116]: 'hu+jian+li'

In [117]: print(a,b,c,sep="+")
hu+jian+li
```

## 字符串中插入变量
```
In [118]: name="hujianli"

In [119]: n=18

In [120]: s="{name} has {n} messages"

In [122]: s.format_map(vars())
Out[122]: 'hujianli has 18 messages'
```

- 字符串格式化代码
```
#方式一
In [131]: import string

In [132]: s = string.Template('$name has $n messages.')

In [133]: s.substitute(vars())
Out[133]: 'hujianli has 18 messages.'
```

## 指定列宽格式化显示字符串
```

In [138]: s = "Look into my eyes, look into my eyes, the eyes, the eyes, \
   .....: the eyes, not around the eyes, don't look around the eyes, \
   .....: look into my eyes, you're under."


In [139]: import textwrap

In [140]: print(textwrap.fill(s, 10))
Look into
my eyes,
look into
my eyes,
the eyes,
the eyes,
the eyes,
not around
the eyes,
don't look
around the
eyes, look
into my
eyes,
you're
under.

In [145]: print(textwrap.fill(s, 40, initial_indent='    '))
    Look into my eyes, look into my
eyes, the eyes, the eyes, the eyes, not
around the eyes, don't look around the
eyes, look into my eyes, you're under.



In [147]: print(textwrap.fill(s, 40, subsequent_indent='    '))
Look into my eyes, look into my eyes,
    the eyes, the eyes, the eyes, not
    around the eyes, don't look around
    the eyes, look into my eyes, you're
    under.

```
