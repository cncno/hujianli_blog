# 数据结构和算法
## 解包和打包

    现在有一个包含 N 个元素的元组或者是序列，怎样将它里面的值解压后同时赋值给 N 个变量？

```
In [2]: p = ("x","y")

In [3]: a,b=p

In [4]: a
Out[4]: 'x'

In [5]: b
Out[5]: 'y'

```



```

In [7]: data=['hujianli',10,20,30,(1,2,3)]

In [8]: name,num1,num2,num3,datanume=data

In [9]: name
Out[9]: 'hujianli'

In [10]: num1
Out[10]: 10

In [11]: num2
Out[11]: 20

In [12]: num3
Out[12]: 30

In [13]: datanume
Out[13]: (1, 2, 3)



```
有时候，你可能只想解压一部分，丢弃其他的值。对于这种情况 Python 并没有提供特殊的语法。
 但是你可以使用任意变量名去占位，到时候丢掉这些变量就行了。
 ```

In [14]: _,num1,num2,num3,_=data

In [15]: num1
Out[15]: 10

In [16]: num2
Out[16]: 20

In [17]: num3
Out[17]: 30

 ```
 ```
In [18]: recird = ('Dave', 'dave@example.com', '773-555-1212', '847-555-1212')

In [19]: name,email,*phone=recird

In [20]: phone
Out[20]: ['773-555-1212', '847-555-1212']

In [21]: name
Out[21]: 'Dave'

In [22]: email
Out[22]: 'dave@example.com'

 ```
 ```
 #!/usr/bin/env python
#-*- coding:utf8 -*-
records = [
    ('foo', 1, 2),
    ('bar', 'hello'),
    ('foo', 3, 4),
]

def do_foo(x, y):
    print('foo', x, y)

def do_bar(s):
    print('bar', s)

for tag, *args in records:
    if tag == 'foo':
        do_foo(*args)
    elif tag == 'bar':
        do_bar(*args)
 ```

## 命名切片
```
In [40]: items=[0,1,2,3,4,5,6,7]

In [41]: a=slice(2,4)       #设置命名切片

In [42]: items[2:4]
Out[42]: [2, 3]

In [43]: items[a]           #获取命名切片
Out[43]: [2, 3]

In [44]: items[a]=[10,11]   #重新赋值给下标

In [45]: items
Out[45]: [0, 1, 10, 11, 4, 5, 6, 7]

In [46]: del items[a]

In [47]: items
Out[47]: [0, 1, 4, 5, 6, 7]

```


